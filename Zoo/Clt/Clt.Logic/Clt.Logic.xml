<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clt.Logic</name>
    </assembly>
    <members>
        <member name="T:Clt.Logic.Abstractions.IApplicationAuthenticationManager">
            <summary>
            Менеджер для выхода из авторизованности
            </summary>
        </member>
        <member name="M:Clt.Logic.Abstractions.IApplicationAuthenticationManager.SignOutAsync">
            <summary>
            Разлогиниться
            </summary>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Abstractions.IClientDataRefresher">
            <summary>
            Обновитель клиентских данных хранящихся в авторизации
            </summary>
        </member>
        <member name="M:Clt.Logic.Abstractions.IClientDataRefresher.UpdateUserDataAsync(Clt.Model.Entities.Default.ApplicationUser,Clt.Model.Entities.Client)">
            <summary>
            Обновить данные пользователя
            </summary>
            <param name="user"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Abstractions.IFileImageChecker">
            <summary>
            Проверщик для файлов на изображения
            </summary>
        </member>
        <member name="M:Clt.Logic.Abstractions.IFileImageChecker.IsImage(Croco.Core.Contract.Files.IFileData)">
            <summary>
            Является ли файл изображением
            </summary>
            <param name="fileData"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.RegistrationModule.CltLogicRegistrator">
            <summary>
            Регистратор клиентской логики
            </summary>
        </member>
        <member name="M:Clt.Logic.RegistrationModule.CltLogicRegistrator.Register(Croco.Core.Application.CrocoApplicationBuilder,System.Action{Microsoft.AspNetCore.Identity.IdentityOptions})">
            <summary>
            Зарегистрировать клиентскую логику
            </summary>
            <param name="applicationBuilder"></param>
            <param name="setupAction"></param>
        </member>
        <member name="T:Clt.Logic.Extensions.MyIdentityExtensions">
            <summary>
            Расширения
            </summary>
        </member>
        <member name="M:Clt.Logic.Extensions.MyIdentityExtensions.HasRight(System.Security.Principal.IPrincipal,Clt.Contract.Enumerations.UserRight)">
            <summary>
            Проверка на наличие права
            </summary>
            <param name="rolePrincipal"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Extensions.UserManagerExtensions.AddRight(Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser},Clt.Model.Entities.Default.ApplicationUser,Clt.Contract.Enumerations.UserRight)">
            <summary>
            Добавляет право пользователю
            </summary>
            <param name="userManager"></param>
            <param name="user"></param>
            <param name="userRight"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Implementations.ApplicationAuthenticationManager">
            <summary>
            Менеджер авторизациии для приложения
            </summary>
        </member>
        <member name="M:Clt.Logic.Implementations.ApplicationAuthenticationManager.#ctor(Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Implementations.ApplicationAuthenticationManager.SignOutAsync">
            <summary>
            Выйти
            </summary>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Implementations.ApplicationSignInManager">
            <summary>
            Переопределение для менеджера авторизации
            </summary>
        </member>
        <member name="M:Clt.Logic.Implementations.ApplicationSignInManager.#ctor(Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{Clt.Model.Entities.Default.ApplicationUser},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser}},Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)">
            <summary>
            Конструктор
            </summary>
            <param name="userManager"></param>
            <param name="contextAccessor"></param>
            <param name="claimsFactory"></param>
            <param name="optionsAccessor"></param>
            <param name="logger"></param>
            <param name="schemes"></param>
        </member>
        <member name="T:Clt.Logic.Implementations.ApplicationUserManager">
            <summary>
            Переопределение для менеджера пользователей
            </summary>
        </member>
        <member name="M:Clt.Logic.Implementations.ApplicationUserManager.#ctor(Microsoft.AspNetCore.Identity.IUserStore{Clt.Model.Entities.Default.ApplicationUser},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{Clt.Model.Entities.Default.ApplicationUser},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{Clt.Model.Entities.Default.ApplicationUser}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{Clt.Model.Entities.Default.ApplicationUser}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser}})">
            <summary>
            Конструктор
            </summary>
            <param name="store"></param>
            <param name="optionsAccessor"></param>
            <param name="passwordHasher"></param>
            <param name="userValidators"></param>
            <param name="passwordValidators"></param>
            <param name="keyNormalizer"></param>
            <param name="errors"></param>
            <param name="services"></param>
            <param name="logger"></param>
        </member>
        <member name="T:Clt.Logic.Implementations.ClientDataRefresher">
            <summary>
            Обновитель клиентских данных хранящихся в авторизации
            </summary>
        </member>
        <member name="M:Clt.Logic.Implementations.ClientDataRefresher.#ctor(Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Implementations.ClientDataRefresher.UpdateUserDataAsync(Clt.Model.Entities.Default.ApplicationUser,Clt.Model.Entities.Client)">
            <summary>
            Обновить данные пользователя
            </summary>
            <param name="user"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Models.ClientJoinedWithApplicationUser">
            <summary>
            Клиент объединенный с пользователем
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.ClientJoinedWithApplicationUser.Client">
            <summary>
            Клиент 
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.ClientJoinedWithApplicationUser.User">
            <summary>
            Пользователь
            </summary>
        </member>
        <member name="T:Clt.Logic.Models.Users.EditApplicationUser">
            <summary>
            Модель для редактирования пользователя
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.Id">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.Name">
            <summary>
            Имя пользователя
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.Email">
            <summary>
            Адрес электоронной почты
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.BirthDate">
            <summary>
            Дата рождения
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.Surname">
            <summary>
            Фамилия пользователя
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.Patronymic">
            <summary>
            Отчество
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.Sex">
            <summary>
            Пол
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.ObjectJson">
            <summary>
            Доп данные
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.EditApplicationUser.PhoneNumber">
            <summary>
            Номер телефона
            </summary>
        </member>
        <member name="T:Clt.Logic.Models.Users.UserActivation">
            <summary>
            Модель активации пользователя
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserActivation.DeActivated">
            <summary>
            Если true, значит пользователь деактивирован в системе
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserActivation.Id">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="T:Clt.Logic.Models.Users.UserSearch">
            <summary>
            Модель для поиск пользователей
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserSearch.Q">
            <summary>
            Поисковая строка
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserSearch.Deactivated">
            <summary>
            Фильтровать по активированности
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserSearch.RegistrationDate">
            <summary>
            Дата регистрации
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserSearch.SearchSex">
            <summary>
            ФИльтровать по полу
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserSearch.Sex">
            <summary>
            Пол
            </summary>
        </member>
        <member name="P:Clt.Logic.Models.Users.UserSearch.GetAllUsers">
            <summary>
            Получить всех пользователей
            </summary>
        </member>
        <member name="T:Clt.Logic.Resources.ClientResource">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ClientResource.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ClientResource.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ClientResource.ClientAvatarUpdated">
            <summary>
              Ищет локализованную строку, похожую на Аватар клиента обновлен.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ClientResource.ClientDataRenewed">
            <summary>
              Ищет локализованную строку, похожую на Данные пользователя обновлены.
            </summary>
        </member>
        <member name="T:Clt.Logic.Resources.ValidationMessages">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.EmailIsNotValid">
            <summary>
              Ищет локализованную строку, похожую на Неправильный Email адрес.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.EmailIsRequired">
            <summary>
              Ищет локализованную строку, похожую на Необходимо указать Email.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ErrorOccuredFormat">
            <summary>
              Ищет локализованную строку, похожую на Произошла ошибка. {0}.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.FileIsNotFoundById">
            <summary>
              Ищет локализованную строку, похожую на Файл не найден по указанному идентификатору.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.FileIsNotImage">
            <summary>
              Ищет локализованную строку, похожую на Файл не является изображением.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ModelIsNullObject">
            <summary>
              Ищет локализованную строку, похожую на Модель является пустым объектом.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ModelIsValid">
            <summary>
              Ищет локализованную строку, похожую на Модель валидна.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ThisEmailIsAlreadyTaken">
            <summary>
              Ищет локализованную строку, похожую на Данный Email уже занят другим пользователем.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ThisPhoneNumberIsAlreadyTaken">
            <summary>
              Ищет локализованную строку, похожую на Данный номер телефона уже занят другим пользователем.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ThisPhoneNumberIsAlreadyTakenByOtherUser">
            <summary>
              Ищет локализованную строку, похожую на Данный номер телефона уже занят другим пользователем.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.ThisPhoneNumberIsAlreadyTakenByOtherUser1">
            <summary>
              Ищет локализованную строку, похожую на Данный номер телефона уже занят другим пользователем.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.UriIsRequired">
            <summary>
              Ищет локализованную строку, похожую на Необходимо указать Uri.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.UserFound">
            <summary>
              Ищет локализованную строку, похожую на Пользователь найден.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.UserIdentifierMustBeProvided">
            <summary>
              Ищет локализованную строку, похожую на Необходимо указать идентификатор пользователя.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.UserIdIsRequired">
            <summary>
              Ищет локализованную строку, похожую на Необходимо указать идентификатор пользователя.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.UserIsNotFoundByIdentifier">
            <summary>
              Ищет локализованную строку, похожую на Пользователь не найден по указанному идентификатору.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.UserNotFound">
            <summary>
              Ищет локализованную строку, похожую на Пользователь не найден.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.YouAreNotAnAdministrator">
            <summary>
              Ищет локализованную строку, похожую на Вы не являетесь администратором.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.YouAreNotAnAdministratorOrSeller">
            <summary>
              Ищет локализованную строку, похожую на Вы не являетесь администратором или продавцом..
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.YouAreNotAuthorized">
            <summary>
              Ищет локализованную строку, похожую на Вы не авторизованы.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.YouCantEditRootUser">
            <summary>
              Ищет локализованную строку, похожую на Вы не можете редактировать пользователя Root.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.YouCantEditUserBecauseHeIsAdministrator">
            <summary>
              Ищет локализованную строку, похожую на Вы не можете редактировать пользователя, так как он является администратором.
            </summary>
        </member>
        <member name="P:Clt.Logic.Resources.ValidationMessages.YouCantEditUserBecauseHeIsSuperAdministrator">
            <summary>
              Ищет локализованную строку, похожую на Вы не можете редактировать пользователя, так как он является Супер-Администратором.
            </summary>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountLoginAsUserService">
            <summary>
            Сервис для логинирования за другого пользователя
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginAsUserService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginAsUserService.LoginAsUserAsync(Clt.Contract.Models.Common.UserIdModel)">
            <summary>
            Залогиниться как другой пользователь
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountLoginWorker">
            <summary>
            Сервис для работы с методами логинирования
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser},Clt.Logic.Services.Users.UserSearcher,Clt.Logic.Core.Workers.PasswordHashValidator,Clt.Logic.Abstractions.IApplicationAuthenticationManager)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="signInManager"></param>
            <param name="userSearcher"></param>
            <param name="passwordHashValidator"></param>
            <param name="authenticationManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginWorker.LoginAsync(Clt.Contract.Models.Account.LoginModel)">
            <summary>
            Авторизоваться по Email
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginWorker.LoginByPhoneNumberAsync(Clt.Logic.Models.Account.LoginByPhoneNumberModel)">
            <summary>
            Авторизоваться по номеру телефона
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginWorker.LogOut">
            <summary>
            Разлогинивание в системе
            </summary>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountManager">
            <summary>
            Методы для работы с учетными записями
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountManager.InitAsync">
            <summary>
            Создается пользователь Root в системе и ему присваиваются все необходимые права
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountManager.CheckUserChanges">
            <summary>
            Проверить изменения пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountManager.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.RoleManager{Clt.Model.Entities.Default.ApplicationRole},Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
            <param name="roleManager"></param>
            <param name="userManager"></param>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountRegistrationWorker">
            <summary>
            Методы для регистрации
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationWorker.RegisterAndSignInAsync(Clt.Contract.Models.Account.RegisterModel,System.Boolean)">
            <summary>
            Зарегистрировать пользователя и авторизоаться
            </summary>
            <param name="model"></param>
            <param name="createRandomPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationWorker.RegisterAsync(Clt.Contract.Models.Account.RegisterModel,System.Boolean)">
            <summary>
            Зарегистрироваться
            </summary>
            <param name="model"></param>
            <param name="createRandomPass"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationWorker.RegisterUserByAdminAsync(Clt.Contract.Models.Account.RegisterModel)">
            <summary>
            Метод регистрирующий пользователя администратором
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="userManager"></param>
            <param name="signInManager"></param>
        </member>
        <member name="T:Clt.Logic.Services.BaseCltWorker">
            <summary>
            Базовый сервис для клиентского контекста
            </summary>
        </member>
        <member name="P:Clt.Logic.Services.BaseCltWorker.RolesSetting">
            <summary>
            Настройки клиенстких ролей
            </summary>
        </member>
        <member name="P:Clt.Logic.Services.BaseCltWorker.RootSettings">
            <summary>
            Настройки прав приложения
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltWorker.IsUserRoot">
            <summary>
            Является ли пользователь рутом
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltWorker.IsUserAdmin">
            <summary>
            Является ли пользователь администратором
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltWorker.ValidateModelAndUserIsAdmin(System.Object)">
            <summary>
            Валидировать модель и убедиться что пользователь является админом
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Users.ClientWorker">
            <summary>
            Менеджер для работы с клиентами
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Clt.Logic.Abstractions.IClientDataRefresher,Clt.Logic.Abstractions.IFileImageChecker,Croco.Core.Logic.Files.Abstractions.IDbFileManager)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
            <param name="clientDataRefresher"></param>
            <param name="fileImageChecker"></param>
            <param name="dbFileManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientWorker.UpdateClientPhotoAsync(System.Int32)">
            <summary>
            Обновить фото клиента
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientWorker.EditClientAsync(Clt.Contract.Models.Users.EditClient)">
            <summary>
            Редактировать клиента
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientWorker.GetClientFromAuthorizationAsync">
            <summary>
            Получить клиента из контекста авторизации
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientWorker.GetClientByIdAsync(System.String)">
            <summary>
            Получить клиента по идентификатору
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Users.UserRoleWorker">
            <summary>
            Сервис для работы с ролями пользователей
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserRoleWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserRoleWorker.GetApplicationRoles``1">
            <summary>
            Получить список ролей пользователя
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserRoleWorker.AddUserToRoleAsync(Clt.Contract.Models.Roles.UserIdAndRole)">
            <summary>
            Добавить роль пользователю
            </summary>
            <param name="userIdAndRole"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserRoleWorker.RemoveRoleFromUserAsync(Clt.Contract.Models.Roles.UserIdAndRole)">
            <summary>
            Удалить роль у пользователя
            </summary>
            <param name="userIdAndRole"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Users.UserSearcher">
            <summary>
            Класс предоставляющий методы для поиска пользователей
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUserByPhoneNumberAsync(System.String)">
            <summary>
            Найти пользователя по номеру телефона
            </summary>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUserByIdAsync(System.String)">
            <summary>
            Найти пользователя по идентификатору
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUserByEmailAsync(System.String)">
            <summary>
            Найти пользователя по Email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUsers(Clt.Logic.Models.Users.UserSearch)">
            <summary>
            Искать пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUsersAsync(Clt.Logic.Models.Users.UserSearch)">
            <summary>
            Получить пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
        </member>
        <member name="T:Clt.Logic.Services.Users.UserWorker">
            <summary>
            Сервис для работы с пользователями
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Clt.Logic.Services.Users.UserSearcher)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="userSearcher"></param>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserWorker.RemoveUserAsync(System.String)">
            <summary>
            Удалить пользователя
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserWorker.EditUserAsync(Clt.Logic.Models.Users.EditApplicationUser)">
            <summary>
            Редактирование пользователя администратором
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserWorker.ActivateOrDeActivateUserAsync(Clt.Logic.Models.Users.UserActivation)">
            <summary>
            Активировать или деактивировать пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Core.Workers.PasswordChanger">
            <summary>
            Сервис для изменеия пароля
            </summary>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordChanger.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="userManager"></param>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordChanger.ChangePasswordAsync(Clt.Contract.Models.Account.ChangeUserPasswordModel)">
            <summary>
            Изменить пароль
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordChanger.ChangePasswordByAdminAsync(Clt.Contract.Models.Account.ResetPasswordByAdminModel,System.Func{System.String,System.Threading.Tasks.Task{Clt.Contract.Models.Common.ApplicationUserBaseModel}})">
            <summary>
            Изменить пароль администратором
            </summary>
            <param name="model"></param>
            <param name="getUserByIdFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordChanger.ChangePasswordBaseAsync(Clt.Model.Entities.Default.ApplicationUser,System.String)">
            <summary>
            Данный метод не может быть вынесен в API (Базовый метод)
            </summary>
            <param name="user"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Core.Workers.PasswordForgotWorker">
            <summary>
            Предоставляет методы для работы с забывшими пароль пользователями
            </summary>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordForgotWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordForgotWorker.UserForgotPassword(Clt.Contract.Models.Account.ForgotPasswordModel)">
            <summary>
            Востановить пароль через адрес электронной почты
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordForgotWorker.UserForgotPasswordByPhoneHandlerAsync(Clt.Contract.Models.Account.ForgotPasswordModelByPhone)">
            <summary>
            Востановить пароль через номер телефона
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordForgotWorker.ChangePasswordByToken(Clt.Contract.Models.Account.ChangePasswordByToken)">
            <summary>
            Изменить пароль по токену
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Core.Workers.PasswordHashValidator">
            <summary>
            Валидатор хешей паролей
            </summary>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordHashValidator.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="app"></param>
        </member>
        <member name="M:Clt.Logic.Core.Workers.PasswordHashValidator.CheckUserNameAndPasswordAsync(System.String,System.String,System.String)">
            <summary>
            Проверить пароль
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
    </members>
</doc>
