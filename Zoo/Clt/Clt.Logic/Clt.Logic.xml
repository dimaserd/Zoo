<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clt.Logic</name>
    </assembly>
    <members>
        <member name="T:Clt.Logic.Abstractions.IApplicationAuthenticationManager">
            <summary>
            Менеджер для выхода из авторизованности
            </summary>
        </member>
        <member name="M:Clt.Logic.Abstractions.IApplicationAuthenticationManager.SignOutAsync">
            <summary>
            Разлогиниться
            </summary>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Abstractions.IClientDataRefresher">
            <summary>
            Обновитель клиентских данных хранящихся в авторизации
            </summary>
        </member>
        <member name="M:Clt.Logic.Abstractions.IClientDataRefresher.UpdateUserDataAsync(Clt.Model.Entities.Default.ApplicationUser,Clt.Model.Entities.Client)">
            <summary>
            Обновить данные пользователя
            </summary>
            <param name="user"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.CltLogicRegistrator">
            <summary>
            Регистратор клиентской логики
            </summary>
        </member>
        <member name="M:Clt.Logic.CltLogicRegistrator.Register(Croco.Core.Application.CrocoApplicationBuilder,System.Action{Microsoft.AspNetCore.Identity.IdentityOptions})">
            <summary>
            Зарегистрировать клиентскую логику
            </summary>
            <param name="applicationBuilder"></param>
            <param name="setupAction"></param>
        </member>
        <member name="T:Clt.Logic.Extensions.ClaimsPrincipalExtensions">
            <summary>
            Расширения для контекста авторизации
            </summary>
        </member>
        <member name="M:Clt.Logic.Extensions.ClaimsPrincipalExtensions.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Получить идентификатор пользователя
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Extensions.ClaimsPrincipalExtensions.GetUserId(System.Security.Principal.IPrincipal)">
            <summary>
            Получить идентификатор пользователя
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Extensions.ClaimsPrincipalExtensions.GetUserId(System.Security.Principal.IIdentity)">
            <summary>
            Получить идентификатор пользователя
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.HealthChecks.CltSettingsHealthCheck.#ctor(Croco.Core.Contract.ISettingsFactory)">
            <summary>
            Конструктор
            </summary>
            <param name="settingsFactory"></param>
        </member>
        <member name="M:Clt.Logic.HealthChecks.CltSettingsHealthCheck.CheckHealth">
            <inheritdoc />
        </member>
        <member name="T:Clt.Logic.Implementations.ApplicationAuthenticationManager">
            <summary>
            Менеджер авторизациии для приложения
            </summary>
        </member>
        <member name="M:Clt.Logic.Implementations.ApplicationAuthenticationManager.#ctor(Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Implementations.ApplicationAuthenticationManager.SignOutAsync">
            <summary>
            Выйти
            </summary>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Implementations.ClientDataRefresher">
            <summary>
            Обновитель клиентских данных хранящихся в авторизации
            </summary>
        </member>
        <member name="M:Clt.Logic.Implementations.ClientDataRefresher.#ctor(Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Implementations.ClientDataRefresher.UpdateUserDataAsync(Clt.Model.Entities.Default.ApplicationUser,Clt.Model.Entities.Client)">
            <summary>
            Обновить данные пользователя
            </summary>
            <param name="user"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountInitiator">
            <summary>
            Методы для работы с учетными записями
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountInitiator.InitAsync">
            <summary>
            Создается пользователь Root в системе и ему присваиваются все необходимые права
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountInitiator.CheckUserChanges">
            <summary>
            Проверить изменения пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountInitiator.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Clt.Logic.Services.Roles.RoleService,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
            <param name="roleManager"></param>
            <param name="userManager"></param>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountLoginAsUserService">
            <summary>
            Сервис для логинирования за другого пользователя
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginAsUserService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="signInManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginAsUserService.LoginAsUserAsync(Clt.Contract.Models.Common.UserIdModel)">
            <summary>
            Залогиниться как другой пользователь
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountLoginService">
            <summary>
            Сервис для работы с методами логинирования
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser},Clt.Logic.Services.Users.UserSearcher,Clt.Logic.Services.Account.PasswordHashValidator,Clt.Logic.Abstractions.IApplicationAuthenticationManager,Microsoft.Extensions.Logging.ILogger{Clt.Logic.Services.Account.AccountLoginService})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="signInManager"></param>
            <param name="userSearcher"></param>
            <param name="passwordHashValidator"></param>
            <param name="authenticationManager"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginService.LoginAsync(Clt.Contract.Models.Account.LoginModel)">
            <summary>
            Авторизоваться по Email
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginService.LoginByPhoneNumberAsync(Clt.Logic.Models.Account.LoginByPhoneNumberModel)">
            <summary>
            Авторизоваться по номеру телефона
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountLoginService.LogOut">
            <summary>
            Разлогинивание в системе
            </summary>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.AccountRegistrationService">
            <summary>
            Методы для регистрации
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser},Clt.Logic.Services.Users.UserSearcher,Microsoft.Extensions.Logging.ILogger{Clt.Logic.Services.Account.AccountRegistrationService})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="userSearcher"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationService.RegisterAndSignInAsync(Clt.Contract.Models.Account.RegisterModel,System.Boolean)">
            <summary>
            Зарегистрировать пользователя и авторизоаться
            </summary>
            <param name="model"></param>
            <param name="createRandomPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationService.RegisterAsync(Clt.Contract.Models.Account.RegisterModel,System.Boolean)">
            <summary>
            Зарегистрироваться
            </summary>
            <param name="model"></param>
            <param name="createRandomPass"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationService.RegisterUserWithNoChecksAsync(Clt.Contract.Models.Account.RegisterModel,System.Boolean)">
            <summary>
            Зарегистрировать пользователя без всяких проверок
            </summary>
            <param name="model"></param>
            <param name="createRandomPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.AccountRegistrationService.RegisterUserByAdminAsync(Clt.Contract.Models.Account.RegisterModel,System.String[])">
            <summary>
            Метод регистрирующий пользователя администратором
            </summary>
            <param name="model"></param>
            <param name="roleNames"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.PasswordChanger">
            <summary>
            Сервис для изменеия пароля
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordChanger.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser},Microsoft.AspNetCore.Identity.SignInManager{Clt.Model.Entities.Default.ApplicationUser},Clt.Logic.Services.Users.UserSearcher)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="userSearcher"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordChanger.ChangePasswordAsync(Clt.Contract.Models.Account.ChangeUserPasswordModel)">
            <summary>
            Изменить пароль
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordChanger.ChangePasswordByAdminAsync(Clt.Contract.Models.Account.ResetPasswordByAdminModel)">
            <summary>
            Изменить пароль администратором
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordChanger.ChangePasswordBaseAsync(Clt.Model.Entities.Default.ApplicationUser,System.String)">
            <summary>
            Данный метод не может быть вынесен в API (Базовый метод)
            </summary>
            <param name="user"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.PasswordForgotService">
            <summary>
            Предоставляет методы для работы с забывшими пароль пользователями
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordForgotService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordForgotService.UserForgotPassword(Clt.Contract.Models.Account.ForgotPasswordModel)">
            <summary>
            Востановить пароль через адрес электронной почты
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordForgotService.UserForgotPasswordByPhoneHandlerAsync(Clt.Contract.Models.Account.ForgotPasswordModelByPhone)">
            <summary>
            Востановить пароль через номер телефона
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordForgotService.ChangePasswordByToken(Clt.Contract.Models.Account.ChangePasswordByToken)">
            <summary>
            Изменить пароль по токену
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Account.PasswordHashValidator">
            <summary>
            Валидатор хешей паролей
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordHashValidator.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="app"></param>
        </member>
        <member name="M:Clt.Logic.Services.Account.PasswordHashValidator.CheckUserNameAndPasswordAsync(System.String,System.String,System.String)">
            <summary>
            Проверить пароль
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.BaseCltService">
            <summary>
            Базовый сервис для клиентского контекста
            </summary>
        </member>
        <member name="P:Clt.Logic.Services.BaseCltService.RolesSetting">
            <summary>
            Настройки клиенстких ролей
            </summary>
        </member>
        <member name="P:Clt.Logic.Services.BaseCltService.RootSettings">
            <summary>
            Настройки прав приложения
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltService.IsUserRoot">
            <summary>
            Является ли пользователь рутом
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltService.IsUserAdmin">
            <summary>
            Является ли пользователь администратором
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.BaseCltService.ValidateModelAndUserIsAdmin(System.Object)">
            <summary>
            Валидировать модель и убедиться что пользователь является админом
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Roles.RoleService">
            <summary>
            Сервис для работы с ролями приложения
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Roles.RoleService.#ctor(Microsoft.AspNetCore.Identity.RoleManager{Clt.Model.Entities.Default.ApplicationRole},Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Clt.Logic.Services.Roles.RoleService})">
            <summary>
            Конструктора
            </summary>
            <param name="roleManager"></param>
            <param name="context"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Clt.Logic.Services.Roles.RoleService.CreateRolesAsync(System.String[])">
            <summary>
            Создать роли
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Roles.UserRoleService">
            <summary>
            Сервис для работы с ролями пользователей
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Roles.UserRoleService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.AspNetCore.Identity.UserManager{Clt.Model.Entities.Default.ApplicationUser})">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
            <param name="userManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Roles.UserRoleService.GetApplicationRoles(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Получить список ролей пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Roles.UserRoleService.AddUserToRoleAsync(Clt.Contract.Models.Roles.UserIdAndRole,System.Boolean)">
            <summary>
            Добавить роль пользователю
            </summary>
            <param name="userIdAndRole"></param>
            <param name="checkUserWhoEdits"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Roles.UserRoleService.RemoveRoleFromUserAsync(Clt.Contract.Models.Roles.UserIdAndRole,System.Boolean)">
            <summary>
            Удалить роль у пользователя
            </summary>
            <param name="userIdAndRole"></param>
            <param name="checkUserWhoEdits"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Users.ClientQueryService">
            <summary>
            Сервис предоставляющий методы для поиска клиентов
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.GetClientFromAuthorizationAsync">
            <summary>
            Получить клиента из контекста авторизации асинхронно
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.GetClientRolesAsync(System.String)">
            <summary>
            Получить роли клиента
            </summary>
            <param name="clientId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.GetClientFromAuthorization">
            <summary>
            Получить клиента из контекста авторизации
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.GetClientByIdAsync(System.String)">
            <summary>
            Получить клиента по идентификатору асинхронно
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.GetClients(Clt.Contract.Models.Clients.ClientSearch)">
            <summary>
            Искать клиентов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientQueryService.GetClientById(System.String)">
            <summary>
            Получить клиента по идентификатору
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Users.ClientService">
            <summary>
            Менеджер для работы с клиентами
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Clt.Logic.Abstractions.IClientDataRefresher,Croco.Core.Logic.Files.Services.FileChecker,Croco.Core.Logic.Files.Abstractions.IDbFileManager)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
            <param name="clientDataRefresher"></param>
            <param name="fileChecker"></param>
            <param name="dbFileManager"></param>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientService.RemoveClientAvatarAsync">
            <summary>
            Удалить аватар клиента
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientService.UpdateClientAvatarAsync(System.Int32)">
            <summary>
            Обновить фото клиента
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.ClientService.EditClientAsync(Clt.Contract.Models.Users.EditClient)">
            <summary>
            Редактировать клиента
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Clt.Logic.Services.Users.UserSearcher">
            <summary>
            Класс предоставляющий методы для поиска пользователей
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUserByPhoneNumberAsync(System.String)">
            <summary>
            Найти пользователя по номеру телефона
            </summary>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUserByIdAsync(System.String)">
            <summary>
            Найти пользователя по идентификатору
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.GetUserByEmailAsync(System.String)">
            <summary>
            Найти пользователя по Email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserSearcher.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="app"></param>
        </member>
        <member name="T:Clt.Logic.Services.Users.UserService">
            <summary>
            Сервис для работы с пользователями
            </summary>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Clt.Logic.Services.Users.UserSearcher)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="userSearcher"></param>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserService.RemoveUserAsync(System.String)">
            <summary>
            Удалить пользователя
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserService.EditUserAsync(Clt.Contract.Models.Users.EditApplicationUser)">
            <summary>
            Редактирование пользователя администратором
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Clt.Logic.Services.Users.UserService.ActivateOrDeActivateUserAsync(Clt.Contract.Models.Users.UserActivation)">
            <summary>
            Активировать или деактивировать пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
    </members>
</doc>
