<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ecc.Logic</name>
    </assembly>
    <members>
        <member name="T:Ecc.Logic.Core.Workers.EmailDelayedSender">
            <summary>
            Отложенный отправитель сообщений
            </summary>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Services.EccPixelUrlProvider)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="urlProvider"></param>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmail(Ecc.Contract.Models.SendMailMessage)">
            <summary>
            Отправить сообщение
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmails(System.Collections.Generic.IEnumerable{Ecc.Contract.Models.SendMailMessage})">
            <summary>
            Отправить сообщения
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmail(Ecc.Contract.Models.SendMailMessageToUser)">
            <summary>
            Отправить сообщение пользователю
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmails(System.Collections.Generic.IEnumerable{Ecc.Contract.Models.SendMailMessageToUser})">
            <summary>
            Отправить сообщения
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.EccLogicRegistrator">
            <summary>
            Регистратор сервисов для работы логики Ecc
            </summary>
        </member>
        <member name="M:Ecc.Logic.EccLogicRegistrator.RegisterLogic``1(Croco.Core.Application.CrocoApplicationBuilder,Ecc.Logic.Settings.EccSettings)">
            <summary>
            Зарегистрировать логику
            </summary>
            <param name="appBuilder"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler.#ctor(Ecc.Logic.Services.EmailListExtractor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler})">
            <summary>
            Конструктор
            </summary>
            <param name="emailsExtractor"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler.HandleMessage(Ecc.Contract.Models.EmailGroup.AppendEmailsFromFileToGroup)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.CreateUserCommandHandler">
            <summary>
            Обработчик для команды создания пользователя
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.CreateUserCommandHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.CreateUserCommandHandler},Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.CreateUserCommandHandler.HandleMessage(Ecc.Contract.Commands.CreateUserCommand)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.FilesUploadedEventHandler">
            <summary>
            Обработчик события загруженных файлов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.FilesUploadedEventHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.FilesUploadedEventHandler},Ecc.Logic.Services.Files.EccFileService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="eccFileService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.FilesUploadedEventHandler.HandleMessage(Croco.Core.Logic.Files.Events.FilesUploadedEvent)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler">
            <summary>
            обработчик для события начала рассылки
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Core.Workers.EmailDelayedSender,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler})">
            <summary>
            
            </summary>
            <param name="application"></param>
            <param name="emailDelayedSender"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.StartEmailDistribution(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Начать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.HandleMessage(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Обработчик сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.UpdateUserCommandHandler">
            <summary>
            Обработчик события обновления пользовательских данных
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.UpdateUserCommandHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.UpdateUserCommandHandler},Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.UpdateUserCommandHandler.HandleMessage(Ecc.Contract.Commands.UpdateUserCommand)">
            <summary>
            Обработчик
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.JsScript">
            <summary>
            Данный джаваскрипт должен описывать две функции GetEmailBody() и GetEmailSubject
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.JsScript">
            <summary>
            Данный джаваскрипт должен описывать две функции GetEmailBody() и GetEmailSubject
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication">
            <summary>
            Отправить уведомление пользователю через интегрированное приложение
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel">
            <summary>
            Модель добавления или удаления группы пользователей из рассылки
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.MailDistributionModel">
            <summary>
            Рассылка пользователям по почте
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Subject">
            <summary>
            Заголовок сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Body">
            <summary>
            Тело сообщения
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete">
            <summary>
            Модель добавления или удаления одной группы пользователя из рассылки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete.UserGroupId">
            <summary>
            Идентификатор группы пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete.AddOrDelete">
            <summary>
            Если добавить в рассылку то значение равно true, если удалить значить false
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.Id">
            <summary>
            Идентификатор уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Users">
            <summary>
            Пользователи принадлежащие к данной группе
            </summary>
        </member>
        <member name="T:Ecc.Logic.Resources.ValidationMessages">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.YouAreNotAnAdministrator">
            <summary>
              Ищет локализованную строку, похожую на Вы не являетесь администратором.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.YouAreNotAuthorized">
            <summary>
              Ищет локализованную строку, похожую на Вы не авторизованы.
            </summary>
        </member>
        <member name="T:Ecc.Logic.Services.Base.BaseEccService">
            <summary>
            Базовый сервис контекста рассылок
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.IsUserAdmin">
            <summary>
            Является ли пользователь админом
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.ValidateModelAndUserIsAdmin(System.Object)">
            <summary>
            Валидировать модель и проверить пользователя на админа
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Chat.ApplicationChatService">
            <summary>
            Сервис для работы с чатами
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.CreateOrGetExistingDialogWithUser(System.String)">
            <summary>
            Создать диалог с пользователем
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.SendMessage(Ecc.Contract.Models.Chat.SendMessageToChat)">
            <summary>
            Написать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.GetCountOfUnreadMessages">
            <summary>
            Получить список непрочитанных сообщений
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.GetChats">
            <summary>
            Получить список чатов
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.VisitChat(System.Int32)">
            <summary>
            Посетить чат
            </summary>
            <param name="chatId"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.GetMessages(Ecc.Contract.Models.Chat.GetChatMessages)">
            <summary>
            Получить сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccPixelUrlProvider.GetPixelEmailUrl(System.String)">
            <summary>
            Получить адрес для установки пикселя для определения прочитанности писем
            </summary>
            <param name="interactionId"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker">
            <summary>
            Сервис для работы с методами поиска редиректов в Email
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.GetCatchesByEmailId(System.String)">
            <summary>
            Получить список пойманных переходов со счетчиками
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.Query(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <summary>
            Искать ловителей переходов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.GetById(System.String)">
            <summary>
            Получить список всех переходов по данному ловителю переходов
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailGroupSender">
            <summary>
            Отправитель Email группе пользователей
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupSender.StartEmailDistributionForGroup(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Начать рассылку для группы
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailGroupWorker">
            <summary>
            Сервис для работы с группами электронных адресов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.RemoveGroup(System.String)">
            <summary>
            Удалить группу
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.CreateGroup(Ecc.Contract.Models.EmailGroup.CreateEmailGroup)">
            <summary>
            Создать группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.AddEmailsToGroup(Ecc.Contract.Models.EmailGroup.AddEmailsToEmailGroup)">
            <summary>
            Добавить адресов в группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.MailDistributionWorker">
            <summary>
            Сервис для работы с рассылками сообщений
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.CreateAsync(Ecc.Contract.Models.MailDistributions.MailDistributionCreate)">
            <summary>
            Создать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.EditMailDistributionAsync(Ecc.Contract.Models.MailDistributions.MailDistributionEdit)">
            <summary>
            Редактировать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.RemoveUserGroupFromMailDistributionAsync(Ecc.Contract.Models.MailDistributions.MainDistributionUserGroupRelationIdModel)">
            <summary>
            Удалить группу пользователей из рассылки
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.RemoveMailDistributionAsync(System.String)">
            <summary>
            Удалить рассылку по идентификатору
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.AddUserGroupToMailDistributionAsync(Ecc.Logic.Models.Messaging.AddMailDistributionUserGroupRelation)">
            <summary>
            Добавить группу пользователей в рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.GetMailDistributionsAsync">
            <summary>
            Получить список рассылок
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.GetMailDistributionWithUserGroupsAsync(System.String)">
            <summary>
            Получить список рассылок с пользователями
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.ChangeUsersInGroupAsync(Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel)">
            <summary>
            Изменить пользователей в группе
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.MailMessageSender">
            <summary>
            Класс посылающий письма
            </summary>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.Senders.SmtpEmailSender">
            <summary>
            Отправитель Email по smtp
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.Senders.SmtpEmailSender.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Services.Emails.Senders.SmtpEmailSender})">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.Senders.SmtpEmailSender.SendEmail(Ecc.Contract.Models.Emails.SendEmailModelWithLoadedAttachments)">
            <summary>
            Отправить email
            </summary>
            <param name="emailModel"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.UserMailMessageWorker">
            <summary>
            Сервис для работы с отправленными Email
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.UserMailMessageWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.UserMailMessageWorker.GetMailsAsync(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <summary>
            Получить список отправленных адресов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.UserMailMessageWorker.DeterminingDateOfOpening(System.String)">
            <summary>
            Установить дату открытия письма
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker">
            <summary>
            Сервис для работы с шаблонами сообщений
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.CreateEmailTemplateAsync(Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate)">
            <summary>
            Создать шаблон сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.UpdateEmailTemplateAsync(Ecc.Logic.Models.EmailTemplates.EditEmailTemplate)">
            <summary>
            Редактировать шаблон сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.GetEmailTemplatesAsync">
            <summary>
            Получить список шаблонов
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.GetActiveEmailTemplates(System.String)">
            <summary>
            Получить список активных шаблонов
            </summary>
            <param name="templateType"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Files.EccFileService">
            <summary>
            Сервис для работы с файлами
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Files.EccFileService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Files.EccFileService.CreateFiles(System.Int32[])">
            <summary>
            Создать файлы
            </summary>
            <param name="fileIds"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EccUserGroupWorker">
            <summary>
            Сервис для работы с группами пользователей
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.CreateGroupAsync(Ecc.Contract.Models.UserGroups.UserGroupCreate)">
            <summary>
            Создать группу пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.EditGroupAsync(Ecc.Contract.Models.UserGroups.UserGroupEdit)">
            <summary>
            Редактировать группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.RemoveUserFromGroupAsync(Ecc.Contract.Models.UserGroups.UserInUserGroupIdModel)">
            <summary>
            Удалить пользователя из группы
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.ChangeUsersInGroupAsync(Ecc.Contract.Models.UserGroups.ChangeUsersInUserGroupModel)">
            <summary>
            Изменить пользователей в группе
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.RemoveUserGroupAsync(System.String)">
            <summary>
            Удалить группу пользователей
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.AddUserToGroupAsync(Ecc.Contract.Models.UserGroups.UserInUserGroupIdModel)">
            <summary>
            Добавить пользователя в группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.GetUserGroupsAsync">
            <summary>
            Получить группы пользователей
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.GetUserGroupWithUsers(System.String)">
            <summary>
            Получить группу пользователей с пользователями
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.EmailSender">
            <summary>
            Отправитель электроннной почты
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.EmailSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Core.Workers.EmailDelayedSender)">
            <summary>
            Отправитель email
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="emailDelayedSender"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.EmailSender.SendEmailViaTemplate(Ecc.Contract.Models.SendMailMessageViaHtmlTemplate)">
            <summary>
            Отправить через шаблон
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.MessageDistributionQueryWorker">
            <summary>
            Предоставляет методы для работы
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MessageDistributionQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="app"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MessageDistributionQueryWorker.GetDistributions">
            <summary>
            Получить список рассылок
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.UserNotificationsWorker">
            <summary>
            Сервис для работы с системными уведомлениями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.GetUserNotificationsIncludingUsersAsync(Ecc.Logic.Models.Notifications.NotificationSearchQueryModel)">
            <summary>
            Получить список уведомлений с пользователями
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.GetUserNotificationsAsync(Ecc.Logic.Models.Notifications.NotificationSearchQueryModel)">
            <summary>
            Получить список уведомлений без пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.RemoveNotificationAsync(System.String)">
            <summary>
            Удалить уведомление
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.CreateNotificationAsync(Ecc.Logic.Models.Notifications.CreateNotification)">
            <summary>
            Создать уведомление
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.GetLastUnReadNotificationAsync">
            <summary>
            Получить последнее непрочитанное уведомление
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.MarkNotificationAsReadAsync(System.String)">
            <summary>
            Пометить уведомление как прочитанное
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Users.UserService">
            <summary>
            Сервис для работы с пользователями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.CreateUser(Ecc.Contract.Commands.CreateUserCommand)">
            <summary>
            Создать пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.UpdateUser(Ecc.Contract.Commands.UpdateUserCommand)">
            <summary>
            Обновить пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Settings.EccSettings">
            <summary>
            Основные настройки пконтекста рассылок
            </summary>
        </member>
        <member name="P:Ecc.Logic.Settings.EccSettings.ApplicationUrl">
            <summary>
            Адрес приложения
            </summary>
        </member>
    </members>
</doc>
