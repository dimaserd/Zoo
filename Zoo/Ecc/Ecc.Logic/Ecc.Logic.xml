<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ecc.Logic</name>
    </assembly>
    <members>
        <member name="T:Ecc.Logic.EccLogicRegistrator">
            <summary>
            Регистратор сервисов для работы логики Ecc
            </summary>
        </member>
        <member name="M:Ecc.Logic.EccLogicRegistrator.RegisterLogic``1(Croco.Core.Application.CrocoApplicationBuilder,Ecc.Logic.Settings.EccSettings)">
            <summary>
            Зарегистрировать логику
            </summary>
            <param name="appBuilder"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler.#ctor(Ecc.Logic.Services.EmailListExtractor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler})">
            <summary>
            Конструктор
            </summary>
            <param name="emailsExtractor"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler.HandleMessage(Ecc.Contract.Models.EmailGroup.AppendEmailsFromFileToGroup)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.CreateUserCommandHandler">
            <summary>
            Обработчик для команды создания пользователя
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.CreateUserCommandHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.CreateUserCommandHandler},Ecc.Logic.Workers.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.CreateUserCommandHandler.HandleMessage(Ecc.Contract.Commands.CreateUserCommand)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler">
            <summary>
            обработчик для события начала рассылки
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Core.Workers.EmailDelayedSender,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler})">
            <summary>
            
            </summary>
            <param name="application"></param>
            <param name="emailDelayedSender"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.StartEmailDistribution(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Начать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.HandleMessage(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Обработчик сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.JsScript">
            <summary>
            Данный джаваскрипт должен описывать две функции GetEmailBody() и GetEmailSubject
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.JsScript">
            <summary>
            Данный джаваскрипт должен описывать две функции GetEmailBody() и GetEmailSubject
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication">
            <summary>
            Отправить уведомление пользователю через интегрированное приложение
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel">
            <summary>
            Модель добавления или удаления группы пользователей из рассылки
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.MailDistributionModel">
            <summary>
            Рассылка пользователям по почте
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Subject">
            <summary>
            Заголовок сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Body">
            <summary>
            Тело сообщения
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete">
            <summary>
            Модель добавления или удаления одной группы пользователя из рассылки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete.UserGroupId">
            <summary>
            Идентификатор группы пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete.AddOrDelete">
            <summary>
            Если добавить в рассылку то значение равно true, если удалить значить false
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.Id">
            <summary>
            Идентификатор уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Users">
            <summary>
            Пользователи принадлежащие к данной группе
            </summary>
        </member>
        <member name="T:Ecc.Logic.Resources.ValidationMessages">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.YouAreNotAnAdministrator">
            <summary>
              Ищет локализованную строку, похожую на Вы не являетесь администратором.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.YouAreNotAuthorized">
            <summary>
              Ищет локализованную строку, похожую на Вы не авторизованы.
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EccPixelUrlProvider.GetPixelEmailUrl(System.String)">
            <summary>
            Получить адрес для установки пикселя для определения прочитанности писем
            </summary>
            <param name="interactionId"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Workers.Base.BaseEccWorker">
            <summary>
            Базовый сервис контекста рассылок
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Base.BaseEccWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Workers.Base.BaseEccWorker.IsUserAdmin">
            <summary>
            Является ли пользователь админом
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Base.BaseEccWorker.ValidateModelAndUserIsAdmin(System.Object)">
            <summary>
            Валидировать модель и проверить пользователя на админа
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Workers.Emails.MailMessageSender">
            <summary>
            Класс посылающий письма
            </summary>
        </member>
        <member name="T:Ecc.Logic.Workers.Emails.Senders.SmtpEmailSender">
            <summary>
            Отправитель Email по smtp
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Emails.Senders.SmtpEmailSender.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Workers.Emails.Senders.SmtpEmailSender})">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Workers.Emails.Senders.SmtpEmailSender.SendEmail(Ecc.Contract.Models.Emails.SendEmailModelWithLoadedAttachments)">
            <summary>
            Отправить email
            </summary>
            <param name="emailModel"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Workers.Emails.UserMailMessageWorker">
            <summary>
            Сервис для работы с отправленными Email
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Emails.UserMailMessageWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Workers.Emails.UserMailMessageWorker.GetMailsAsync(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <summary>
            Получить список отправленных адресов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Emails.UserMailMessageWorker.DeterminingDateOfOpening(System.String)">
            <summary>
            Установить дату открытия письма
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Workers.Messaging.EmailSender">
            <summary>
            Отправитель электроннной почты
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.EmailSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Core.Workers.EmailDelayedSender)">
            <summary>
            Отправитель email
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="emailDelayedSender"></param>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.EmailSender.SendEmailViaTemplate(Ecc.Contract.Models.SendMailMessageViaHtmlTemplate)">
            <summary>
            Отправить через шаблон
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Workers.Messaging.MessageDistributionQueryWorker">
            <summary>
            Предоставляет методы для работы
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.MessageDistributionQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="app"></param>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.MessageDistributionQueryWorker.GetDistributions">
            <summary>
            Получить список рассылок
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Workers.Messaging.UserNotificationsWorker">
            <summary>
            Сервис для работы с системными уведомлениями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.GetUserNotificationsIncludingUsersAsync(Ecc.Logic.Models.Notifications.NotificationSearchQueryModel)">
            <summary>
            Получить список уведомлений с пользователями
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.GetUserNotificationsAsync(Ecc.Logic.Models.Notifications.NotificationSearchQueryModel)">
            <summary>
            Получить список уведомлений без пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.RemoveNotificationAsync(System.String)">
            <summary>
            Удалить уведомление
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.CreateNotificationAsync(Ecc.Logic.Models.Notifications.CreateNotification)">
            <summary>
            Создать уведомление
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.GetLastUnReadNotificationAsync">
            <summary>
            Получить последнее непрочитанное уведомление
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.MarkNotificationAsReadAsync(System.String)">
            <summary>
            Пометить уведомление как прочитанное
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Messaging.UserNotificationsWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Workers.Users.UserService">
            <summary>
            Сервис для работы с пользователями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Workers.Users.UserService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Workers.Users.UserService.CreateUser(Ecc.Contract.Commands.CreateUserCommand)">
            <summary>
            Создать пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Workers.Users.UserService.UpdateUser(Ecc.Contract.Commands.UpdateUserCommand)">
            <summary>
            Обновить пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
    </members>
</doc>
