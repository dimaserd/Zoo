<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ecc.Logic</name>
    </assembly>
    <members>
        <member name="T:Ecc.Logic.Abstractions.IEmailSender">
            <summary>
            Абстракция описывающая отправителя электронной почты
            </summary>
        </member>
        <member name="M:Ecc.Logic.Abstractions.IEmailSender.SendEmail(Ecc.Contract.Models.Emails.SendEmailModelWithLoadedAttachments)">
            <summary>
            Отправить электронную почту
            </summary>
            <param name="emailModel"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Clients.OneSignalClient">
            <summary>
            Клиент для взаимодействия с OneSignal Api
            </summary>
        </member>
        <member name="M:Ecc.Logic.Clients.OneSignalClient.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Clients.OneSignalClient})">
            <summary>
            Конструктор
            </summary>
            <param name="httpClient"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Clients.OneSignalClient.GetSendNotificationTaskForIosApp(Ecc.Model.Entities.IntegratedApps.IntegratedAppUserSetting,Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication)">
            <summary>
            Отправить уведомление для Ios приложения
            </summary>
            <param name="setting"></param>
            <param name="reqModel"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Core.Workers.EmailDelayedSender">
            <summary>
            Отложенный отправитель сообщений
            </summary>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Services.EccPixelUrlProvider)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="urlProvider"></param>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmail(Ecc.Contract.Models.SendMailMessage)">
            <summary>
            Отправить сообщение
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmails(System.Collections.Generic.IEnumerable{Ecc.Contract.Models.SendMailMessage})">
            <summary>
            Отправить сообщения
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmail(Ecc.Contract.Models.SendMailMessageToUser)">
            <summary>
            Отправить сообщение пользователю
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Core.Workers.EmailDelayedSender.SendEmails(System.Collections.Generic.IEnumerable{Ecc.Contract.Models.SendMailMessageToUser})">
            <summary>
            Отправить сообщения
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.EccLogicRegistrator">
            <summary>
            Регистратор сервисов для работы логики Ecc
            </summary>
        </member>
        <member name="M:Ecc.Logic.EccLogicRegistrator.RegisterLogic(Croco.Core.Application.CrocoApplicationBuilder,Ecc.Logic.Settings.EccSettings)">
            <summary>
            Зарегистрировать логику
            </summary>
            <param name="appBuilder"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler.#ctor(Ecc.Logic.Services.EmailListExtractor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler})">
            <summary>
            Конструктор
            </summary>
            <param name="emailsExtractor"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.AppendEmailsFromFileToGroupMessageHandler.HandleMessage(Ecc.Contract.Models.EmailGroup.AppendEmailsFromFileToGroup)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.CreateUserCommandHandler">
            <summary>
            Обработчик для команды создания пользователя
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.CreateUserCommandHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.CreateUserCommandHandler},Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.CreateUserCommandHandler.HandleMessage(Ecc.Contract.Commands.CreateUserCommand)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.FilesUploadedEventHandler">
            <summary>
            Обработчик события загруженных файлов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.FilesUploadedEventHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.FilesUploadedEventHandler},Ecc.Logic.Services.Files.EccFileService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="eccFileService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.FilesUploadedEventHandler.HandleMessage(Croco.Core.Logic.Files.Events.FilesUploadedEvent)">
            <summary>
            Обработать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler">
            <summary>
            обработчик для события начала рассылки
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Core.Workers.EmailDelayedSender,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler})">
            <summary>
            
            </summary>
            <param name="application"></param>
            <param name="emailDelayedSender"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.StartEmailDistribution(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Начать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Handlers.SendMailsForEmailGroupMessageHandler.HandleMessage(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Обработчик сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Handlers.UpdateUserCommandHandler">
            <summary>
            Обработчик события обновления пользовательских данных
            </summary>
        </member>
        <member name="M:Ecc.Logic.Handlers.UpdateUserCommandHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Handlers.UpdateUserCommandHandler},Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Handlers.UpdateUserCommandHandler.HandleMessage(Ecc.Contract.Commands.UpdateUserCommand)">
            <summary>
            Обработчик
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Integrations.ClientDataUpdatedEventHandler">
            <summary>
            Обработчик события зарегистрированного пользователя
            </summary>
        </member>
        <member name="M:Ecc.Logic.Integrations.ClientDataUpdatedEventHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Integrations.ClientRegisteredEventHandler},Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Integrations.ClientDataUpdatedEventHandler.HandleMessage(Clt.Contract.Events.ClientDataUpdatedEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Ecc.Logic.Integrations.ClientRegisteredEventHandler">
            <summary>
            Обработчик события зарегистрированного пользователя
            </summary>
        </member>
        <member name="M:Ecc.Logic.Integrations.ClientRegisteredEventHandler.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Integrations.ClientRegisteredEventHandler},Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Integrations.ClientRegisteredEventHandler.HandleMessage(Clt.Contract.Events.ClientRegisteredEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Ecc.Logic.Integrations.CltUserMasterStorage">
            <summary>
            Имплементация клиенсткого хранилища
            </summary>
        </member>
        <member name="M:Ecc.Logic.Integrations.CltUserMasterStorage.#ctor(Clt.Model.CltDbContext)">
            <summary>
            Конструктор
            </summary>
            <param name="cltDbContext"></param>
        </member>
        <member name="M:Ecc.Logic.Integrations.CltUserMasterStorage.GetUserById(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ecc.Logic.Integrations.CltUserMasterStorage.GetUsers(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <inheritdoc />
        </member>
        <member name="T:Ecc.Logic.Models.ApplicationInteractionWithStatus`1">
            <summary>
            Модель описываюая взаимодействие с последним статусом
            </summary>
            <typeparam name="TInteraction"></typeparam>
        </member>
        <member name="P:Ecc.Logic.Models.ApplicationInteractionWithStatus`1.Interaction">
            <summary>
            Взаимодействие
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.ApplicationInteractionWithStatus`1.Status">
            <summary>
            Статус
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.EccReplacing">
            <summary>
            Модель описывающая текстовую замену
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EccReplacing.TextToReplace">
            <summary>
            Текст для замены
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EccReplacing.Func">
            <summary>
            Функция для замены
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.EccTextFunc">
            <summary>
            Описание функции текстовой замены
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EccTextFunc.Name">
            <summary>
            Название функции
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EccTextFunc.Args">
            <summary>
            Аргументы
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate">
            <summary>
            Создать шаблон эмейла
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.TemplateType">
            <summary>
            Тип шаблона сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.IsActive">
            <summary>
            Флаг активности
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.CustomEmailType">
            <summary>
            Название типа шаблона
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.JsScript">
            <summary>
            Данный джаваскрипт должен описывать две функции GetEmailBody() и GetEmailSubject
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate.IsJsScripted">
            <summary>
            Флаг заскриптоанности
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.EmailTemplates.EditEmailTemplate">
            <summary>
            Редактирование шаблона эмейла
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EditEmailTemplate.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel">
            <summary>
            Модель описывающая шаблон эмейлв
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.Id">
            <summary>
            Идентифиатор
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.TemplateType">
            <summary>
            Тип сообощения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.IsActive">
            <summary>
            Флаг активности
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.CustomEmailType">
            <summary>
            Тип шаблона
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.JsScript">
            <summary>
            Данный джаваскрипт должен описывать две функции GetEmailBody() и GetEmailSubject
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.EmailTemplates.EmailTemplateModel.IsJsScripted">
            <summary>
            Является ли письмо заскриптованным
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.IntegratedApps.AddUserAppSetting">
            <summary>
            Добавить настройку для пользователя для приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.AddUserAppSetting.AppUId">
            <summary>
            Идентификатор приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.AddUserAppSetting.UserUidInApp">
            <summary>
            Идентификатор пользователя в приложении
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication">
            <summary>
            Модель для создания и редактирования интеграционного приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication.Name">
            <summary>
            Название
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication.AppType">
            <summary>
            Тип приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication.Uid">
            <summary>
            Уникальный идентификатор приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication.ConfigurationJson">
            <summary>
            Настройки конфигурации
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal">
            <summary>
            Отправить уведомление через OneSignal
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal.AppId">
            <summary>
            Идентифкатор приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal.IncludedSegments">
            <summary>
            Вложенные сегменты
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal.Data">
            <summary>
            Данные
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal.Contents">
            <summary>
            Содержимое
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal.Headings">
            <summary>
            Заголовки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendNotificationViaOneSignal.IncludePlayerIds">
            <summary>
            Включенные идентификаторы
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication">
            <summary>
            Отправить уведомление пользователю через интегрированное приложение
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication.Title">
            <summary>
            Заголовок уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication.Text">
            <summary>
            Текст уведомления
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.AddMailDistributionUserGroupRelation">
            <summary>
            Добавить группу польщователей к рассылке
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.AddMailDistributionUserGroupRelation.MailDistributionId">
            <summary>
            Идентификатор рассылки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.AddMailDistributionUserGroupRelation.UserGroupId">
            <summary>
            Идентификатор группы пользователей
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel">
            <summary>
            Модель добавления или удаления группы пользователей из рассылки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel.MailDistributionId">
            <summary>
            Идентификатор рассылки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel.UserGroupActions">
            <summary>
            Действия с группами пользователей
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.GetClientInteractions">
            <summary>
            Получить взаимодействия с клиентом
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.GetClientInteractions.ClientId">
            <summary>
            Идентификатор клиента
            </summary>
        </member>
        <member name="M:Ecc.Logic.Models.Messaging.GetClientInteractions.GetCriterias">
            <summary>
            Получить критерии поиска
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.InteractionStatusModel">
            <summary>
            Модель описывающая статус взаимодействия
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.InteractionStatusModel.Status">
            <summary>
            Статус
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.InteractionStatusModel.StartedOn">
            <summary>
            Дата назначения статуса
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.InteractionStatusModel.StatusDescription">
            <summary>
            Описание статуса
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.MailDistributionModel">
            <summary>
            Рассылка пользователям по почте
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Name">
            <summary>
            Название
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Subject">
            <summary>
            Заголовок сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.Body">
            <summary>
            Тело сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.SendToEveryUser">
            <summary>
            Отправлять каждому пользователю
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailDistributionModel.UserGroups">
            <summary>
            Группы пользователей
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.MailMessageDetailedModel">
            <summary>
            Детальная модель для рассылки эмейлов
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.Body">
            <summary>
            Тело сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.Header">
            <summary>
            Заголовок сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.ReadOn">
            <summary>
            Дата прочтения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.SentOn">
            <summary>
            Дата отправки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.EmailAddress">
            <summary>
            Куда было отправлено сообщение
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.Statuses">
            <summary>
            История статусов взаимодействия
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageDetailedModel.Redirects">
            <summary>
            Редиректы
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.MailMessageModel">
            <summary>
            Модель описывающая эмейл
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.Id">
            <summary>
            Идентификатор сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.Body">
            <summary>
            Тело сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.Header">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.ReadOn">
            <summary>
            Дата прочтения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.SentOn">
            <summary>
            Дата отправки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.EmailAddress">
            <summary>
            Адрес электронной почты
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.MailMessageModel.Status">
            <summary>
            Статус уведомления
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete">
            <summary>
            Модель добавления или удаления одной группы пользователя из рассылки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete.UserGroupId">
            <summary>
            Идентификатор группы пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Messaging.UserGroupIMailDistributionAddOrDelete.AddOrDelete">
            <summary>
            Если добавить в рассылку то значение равно true, если удалить значить false
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Notifications.CreateNotification">
            <summary>
            Модель для создания уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.CreateNotification.Title">
            <summary>
            Заголовок уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.CreateNotification.Text">
            <summary>
            Текст уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.CreateNotification.ObjectJSON">
            <summary>
            Дополнительные данные
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.CreateNotification.Type">
            <summary>
            Тип уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.CreateNotification.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Notifications.NotificationModel">
            <summary>
            Модель описывающая уведомление
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.Id">
            <summary>
            Идентификатор уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.Title">
            <summary>
            Заголовок
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.Text">
            <summary>
            Текст уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.ObjectJson">
            <summary>
            Сериализованные дополнительные данные
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.Type">
            <summary>
            Тип уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.CreatedOn">
            <summary>
            Дата создания
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.ReadOn">
            <summary>
            Дата прочтения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModel.UserId">
            <summary>
            Идентификатор пользователя
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Notifications.NotificationModelWithUserModel">
            <summary>
            Модель пользователя с уведомлением
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModelWithUserModel.User">
            <summary>
            Пользователь
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationModelWithUserModel.Notification">
            <summary>
            Уведомление
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Notifications.NotificationSearchQueryModel">
            <summary>
            Модель для поиска уведомлений
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationSearchQueryModel.UserId">
            <summary>
            Идентификатор пользователя, к которому прикреплено уведомление
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationSearchQueryModel.CreatedOn">
            <summary>
            Диапазон для даты создания уведомления
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Notifications.NotificationSearchQueryModel.Read">
            <summary>
            Флаг прочитанности
            </summary>
        </member>
        <member name="M:Ecc.Logic.Models.Notifications.NotificationSearchQueryModel.GetCriterias">
            <summary>
            Получить критерии для поиска
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Models.Users.UserExportResult">
            <summary>
            Модель описывающая результат экспортирования пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserExportResult.UsersExported">
            <summary>
            Экспортировано пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserExportResult.TotalUsers">
            <summary>
            Всего пользователей в хранилище
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Users.UserGroupModelWithUsers">
            <summary>
            Группа пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Id">
            <summary>
            Идентификатор группы
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Name">
            <summary>
            Название
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Deleted">
            <summary>
            Признак удаленности
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelWithUsers.Users">
            <summary>
            Пользователи принадлежащие к данной группе
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Users.UserGroupModelNoUsers">
            <summary>
            Модель описывающая группу без пользователей
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelNoUsers.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelNoUsers.Name">
            <summary>
            Название
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelNoUsers.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserGroupModelNoUsers.Deleted">
            <summary>
            Признак удаленности
            </summary>
        </member>
        <member name="T:Ecc.Logic.Models.Users.UserMailMessageModel">
            <summary>
            Письмо для пользователя
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.Id">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.ReceiverEmail">
            <summary>
            Адрес получателя
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.Body">
            <summary>
            Тело сообщения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.Subject">
            <summary>
            Тема письма
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.CreationDate">
            <summary>
            Дата создания
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.SentDate">
            <summary>
            Дата отправки
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.ReadDate">
            <summary>
            Дата прочтения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Models.Users.UserMailMessageModel.User">
            <summary>
            Получатель
            </summary>
        </member>
        <member name="T:Ecc.Logic.Resources.UserResources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.UserCreatedSuccessfully">
            <summary>
              Ищет локализованную строку, похожую на Пользователь успешно добавлен.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.UserNotFoundById">
            <summary>
              Ищет локализованную строку, похожую на Пользователь не найден с таким идентификатором.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.UserNotFoundInMasterStorage">
            <summary>
              Ищет локализованную строку, похожую на Пользователь не найден в мастер-хранилище по указанному идентификатору.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.UserUpdatedSuccessfully">
            <summary>
              Ищет локализованную строку, похожую на Пользователь успешно обновлен.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.UserResources.UserWithIdAlreadyExists">
            <summary>
              Ищет локализованную строку, похожую на Пользователь с таким идентификатором уже существует.
            </summary>
        </member>
        <member name="T:Ecc.Logic.Resources.ValidationMessages">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.YouAreNotAnAdministrator">
            <summary>
              Ищет локализованную строку, похожую на Вы не являетесь администратором.
            </summary>
        </member>
        <member name="P:Ecc.Logic.Resources.ValidationMessages.YouAreNotAuthorized">
            <summary>
              Ищет локализованную строку, похожую на Вы не авторизованы.
            </summary>
        </member>
        <member name="T:Ecc.Logic.Services.Base.BaseEccService">
            <summary>
            Базовый сервис контекста рассылок
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.IsUserAdmin">
            <summary>
            Является ли пользователь админом
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Base.BaseEccService.ValidateModelAndUserIsAdmin(System.Object)">
            <summary>
            Валидировать модель и проверить пользователя на админа
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Chat.ApplicationChatService">
            <summary>
            Сервис для работы с чатами
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.CreateOrGetExistingDialogWithUser(System.String)">
            <summary>
            Создать диалог с пользователем
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.SendMessage(Ecc.Contract.Models.Chat.SendMessageToChat)">
            <summary>
            Написать сообщение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.GetCountOfUnreadMessages">
            <summary>
            Получить список непрочитанных сообщений
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.GetChats">
            <summary>
            Получить список чатов
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.VisitChat(System.Int32)">
            <summary>
            Посетить чат
            </summary>
            <param name="chatId"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Chat.ApplicationChatService.GetMessages(Ecc.Contract.Models.Chat.GetChatMessages)">
            <summary>
            Получить сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EccPixelUrlProvider">
            <summary>
            Провайдер пикселя для прочитки эмейла
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EccPixelUrlProvider.#ctor(Ecc.Logic.Settings.EccSettings)">
            <summary>
            Конструктор
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Ecc.Logic.Services.EccPixelUrlProvider.GetPixelEmailUrl(System.String)">
            <summary>
            Получить адрес для установки пикселя для определения прочитанности писем
            </summary>
            <param name="interactionId"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EmailListExtractor">
            <summary>
            Экстратор эмейл адресов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EmailListExtractor.#ctor(Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Ecc.Logic.Services.EmailListExtractor.ExtractEmailsListFromFile(System.String)">
            <summary>
            Вытащить эмейлы из файла
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker">
            <summary>
            Сервис для работы с методами поиска редиректов в Email
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.GetCatchesByEmailId(System.String)">
            <summary>
            Получить список пойманных переходов со счетчиками
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.Query(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <summary>
            Искать ловителей переходов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker.GetById(System.String)">
            <summary>
            Получить список всех переходов по данному ловителю переходов
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailGroupFromFileCreator">
            <summary>
            Сервис для создания группы эмейлов из файла
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupFromFileCreator.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupFromFileCreator.ApppendEmailsToGroup(Ecc.Contract.Models.EmailGroup.AppendEmailsFromFileToGroup)">
            <summary>
            Добавить эмейлы в группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailGroupQueryWorker">
            <summary>
            Сервис для работы с запросами к группам электронных адресов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupQueryWorker.GetEmailsInGroup(Ecc.Contract.Models.EmailGroup.GetEmailsInGroup)">
            <summary>
            Получить электронные адреса в группе
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupQueryWorker.GetEmailGroups(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <summary>
            Получить группы адресов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailGroupSender">
            <summary>
            Отправитель Email группе пользователей
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupSender.StartEmailDistributionForGroup(Ecc.Contract.Models.EmailGroup.SendMailsForEmailGroup)">
            <summary>
            Начать рассылку для группы
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailGroupWorker">
            <summary>
            Сервис для работы с группами электронных адресов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.RemoveGroup(System.String)">
            <summary>
            Удалить группу
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.CreateGroup(Ecc.Contract.Models.EmailGroup.CreateEmailGroup)">
            <summary>
            Создать группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailGroupWorker.AddEmailsToGroup(Ecc.Contract.Models.EmailGroup.AddEmailsToEmailGroup)">
            <summary>
            Добавить адресов в группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailLinkFunctionInvoker">
            <summary>
            Сервис для процессинга текста
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailLinkFunctionInvoker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Settings.EccSettings)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContextAccessor"></param>
            <param name="application"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailLinkFunctionInvoker.ProccessText(System.String,Ecc.Logic.Models.EccReplacing)">
            <summary>
            Преобразовать текст
            </summary>
            <param name="interactionId"></param>
            <param name="replacing"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.MailDistributionWorker">
            <summary>
            Сервис для работы с рассылками сообщений
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.CreateAsync(Ecc.Contract.Models.MailDistributions.MailDistributionCreate)">
            <summary>
            Создать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.EditMailDistributionAsync(Ecc.Contract.Models.MailDistributions.MailDistributionEdit)">
            <summary>
            Редактировать рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.RemoveUserGroupFromMailDistributionAsync(Ecc.Contract.Models.MailDistributions.MainDistributionUserGroupRelationIdModel)">
            <summary>
            Удалить группу пользователей из рассылки
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.RemoveMailDistributionAsync(System.String)">
            <summary>
            Удалить рассылку по идентификатору
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.AddUserGroupToMailDistributionAsync(Ecc.Logic.Models.Messaging.AddMailDistributionUserGroupRelation)">
            <summary>
            Добавить группу пользователей в рассылку
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.GetMailDistributionsAsync">
            <summary>
            Получить список рассылок
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.GetMailDistributionWithUserGroupsAsync(System.String)">
            <summary>
            Получить список рассылок с пользователями
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.ChangeUsersInGroupAsync(Ecc.Logic.Models.Messaging.ChangeUserGroupsInMailDistributionModel)">
            <summary>
            Изменить пользователей в группе
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailDistributionWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.MailMessageSender">
            <summary>
            Класс посылающий письма
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailMessageSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Services.Emails.EmailWrapperSender)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="emailSender"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.MailMessageSender.SendInteractions(System.Collections.Generic.List{Ecc.Contract.Models.SendEmailModelWithInteractionId})">
            <summary>
            Отправить взаимодействия
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.Senders.SmtpEmailSender">
            <summary>
            Отправитель Email по smtp
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.Senders.SmtpEmailSender.#ctor(Croco.Core.Contract.Application.ICrocoApplication,Microsoft.Extensions.Logging.ILogger{Ecc.Logic.Services.Emails.Senders.SmtpEmailSender})">
            <summary>
            Конструктор
            </summary>
            <param name="application"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.Senders.SmtpEmailSender.SendEmail(Ecc.Contract.Models.Emails.SendEmailModelWithLoadedAttachments)">
            <summary>
            Отправить email
            </summary>
            <param name="emailModel"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.EmailWrapperSender">
            <summary>
            Обертка для отправителей эмейлов
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailWrapperSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Croco.Core.Logic.Files.Abstractions.IDbFileManager,Ecc.Logic.Abstractions.IEmailSender)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContextAccessor"></param>
            <param name="application"></param>
            <param name="fileManager"></param>
            <param name="emailSender"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.EmailWrapperSender.SendEmails``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Отправить эмейлы
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Emails.UserMailMessageWorker">
            <summary>
            Сервис для работы с отправленными Email
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.UserMailMessageWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.UserMailMessageWorker.GetMailsAsync(Croco.Core.Contract.Models.Search.GetListSearchModel)">
            <summary>
            Получить список отправленных адресов
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Emails.UserMailMessageWorker.DeterminingDateOfOpening(System.String)">
            <summary>
            Установить дату открытия письма
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker">
            <summary>
            Сервис для работы с шаблонами сообщений
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.CreateEmailTemplateAsync(Ecc.Logic.Models.EmailTemplates.CreateEmailTemplate)">
            <summary>
            Создать шаблон сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.UpdateEmailTemplateAsync(Ecc.Logic.Models.EmailTemplates.EditEmailTemplate)">
            <summary>
            Редактировать шаблон сообщения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.GetEmailTemplatesAsync">
            <summary>
            Получить список шаблонов
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.GetActiveEmailTemplates(System.String)">
            <summary>
            Получить список активных шаблонов
            </summary>
            <param name="templateType"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EmailTemplates.EmailTemplatesWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Files.EccFileService">
            <summary>
            Сервис для работы с файлами
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Files.EccFileService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Files.EccFileService.CreateFiles(System.Int32[])">
            <summary>
            Создать файлы
            </summary>
            <param name="fileIds"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.EccUserGroupWorker">
            <summary>
            Сервис для работы с группами пользователей
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.CreateGroupAsync(Ecc.Contract.Models.UserGroups.UserGroupCreate)">
            <summary>
            Создать группу пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.EditGroupAsync(Ecc.Contract.Models.UserGroups.UserGroupEdit)">
            <summary>
            Редактировать группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.RemoveUserFromGroupAsync(Ecc.Contract.Models.UserGroups.UserInUserGroupIdModel)">
            <summary>
            Удалить пользователя из группы
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.ChangeUsersInGroupAsync(Ecc.Contract.Models.UserGroups.ChangeUsersInUserGroupModel)">
            <summary>
            Изменить пользователей в группе
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.RemoveUserGroupAsync(System.String)">
            <summary>
            Удалить группу пользователей
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.AddUserToGroupAsync(Ecc.Contract.Models.UserGroups.UserInUserGroupIdModel)">
            <summary>
            Добавить пользователя в группу
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.GetUserGroupsAsync">
            <summary>
            Получить группы пользователей
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.EccUserGroupWorker.GetUserGroupWithUsers(System.String)">
            <summary>
            Получить группу пользователей с пользователями
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker">
            <summary>
            Сервис для работы с интеграционными приложениями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Clients.OneSignalClient)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="oneSignalClient"></param>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.GetApplicationsAsync">
            <summary>
            Список приложений
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.AddApplicationAsync(Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication)">
            <summary>
            Добавить приложение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.EditApplicationAsync(Ecc.Logic.Models.IntegratedApps.CreateOrEditApplication)">
            <summary>
            Редактировать приложение
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.AddUserAppSettingIdAsync(Ecc.Logic.Models.IntegratedApps.AddUserAppSetting)">
            <summary>
            Добавить настройку для приложения
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.SendUserNotificationsAsync(System.Collections.Generic.List{Ecc.Model.Entities.Interactions.Interaction})">
            <summary>
            Отправить уведомления
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.IntegratedApps.IntegratedAppWorker.SendUserNotificationViaIntegratedApplicationUnsafeAsync(Ecc.Logic.Models.IntegratedApps.SendUserNotificationViaApplication)">
            <summary>
            Отправить уведомления небезопасно
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.ApplicationInteractionWorker">
            <summary>
            Сервис для работы со взаимодействиями с клиентами
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.ApplicationInteractionWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.ApplicationInteractionWorker.SetStatusForInteractions(System.Collections.Generic.IEnumerable{System.String},Ecc.Common.Enumerations.InteractionStatus,System.String)">
            <summary>
            Установить статус для взаимодействий
            </summary>
            <param name="ids"></param>
            <param name="status"></param>
            <param name="statusDescription"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.ApplicationInteractionWorker.UpdateInteractionStatusesAsync(System.Collections.Generic.List{Ecc.Contract.Models.Interactions.UpdateInteractionStatus})">
            <summary>
            Обновить статусы взаимодействиям
            </summary>
            <param name="statuses"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.ApplicationInteractionWorker.GetInitQueryToSend``1">
            <summary>
            Получить базовый запрос для взаимодействий, которые необходимо отправить
            </summary>
            <typeparam name="TInteraction"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.EmailSender">
            <summary>
            Отправитель электроннной почты
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.EmailSender.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Core.Workers.EmailDelayedSender)">
            <summary>
            Отправитель email
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="emailDelayedSender"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.EmailSender.SendEmailViaTemplate(Ecc.Contract.Models.SendMailMessageViaHtmlTemplate)">
            <summary>
            Отправить через шаблон
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.MailDistributionInteractionWorker">
            <summary>
            Сервис для работы с рассылками электронной почты
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MailDistributionInteractionWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Services.Emails.MailMessageSender)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="mailMessageSender"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MailDistributionInteractionWorker.SendEmailsAsync">
            <summary>
            Отправить эмейлы
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.MailDistributionQueryWorker">
            <summary>
            Сервис для работы с поисковыми запросами к электронным письмам
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MailDistributionQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Logic.Services.EmailRedirects.EmailRedirectsQueryWorker)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
            <param name="emailRedirectsQueryWorker"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MailDistributionQueryWorker.GetMailMessageDetailed(System.String)">
            <summary>
            Получить подробную информацию о сообщении
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MailDistributionQueryWorker.GetClientMailMessages(Ecc.Logic.Models.Messaging.GetClientInteractions)">
            <summary>
            Получить Email отправленные клиенту
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.MessageDistributionQueryWorker">
            <summary>
            Предоставляет методы для работы
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MessageDistributionQueryWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="app"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.MessageDistributionQueryWorker.GetDistributions">
            <summary>
            Получить список рассылок
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.SmsMessageWorker">
            <summary>
            Сервис для работы с смсками
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.SmsMessageWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.SmsMessageWorker.SendSms(Ecc.Contract.Models.Sms.SendSmsToClient)">
            <summary>
            Отправить смс
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.SmsMessageWorker.GetClientSmsMessages(Ecc.Logic.Models.Messaging.GetClientInteractions)">
            <summary>
            Получить смс-сообщения отправленные клиенту
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.SmsMessageWorker.ToSmsMessage(Ecc.Contract.Models.Sms.SendSmsToClient,System.String)">
            <summary>
            Привести к смс сообщению
            </summary>
            <param name="message"></param>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.UserNotificationsQueryService">
            <summary>
            Сервис для поиска уведомлений внутри приложения
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsQueryService.GetUserNotificationsIncludingUsersAsync(Ecc.Logic.Models.Notifications.NotificationSearchQueryModel)">
            <summary>
            Получить список уведомлений с пользователями
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsQueryService.GetUserNotificationsAsync(Ecc.Logic.Models.Notifications.NotificationSearchQueryModel)">
            <summary>
            Получить список уведомлений без пользователей
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsQueryService.GetLastClientUnReadNotificationAsync">
            <summary>
            Получить последнее непрочитанное уведомление
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsQueryService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Messaging.UserNotificationsWorker">
            <summary>
            Сервис для работы с системными уведомлениями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.RemoveNotificationAsync(System.String)">
            <summary>
            Удалить уведомление
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.CreateNotificationAsync(Ecc.Logic.Models.Notifications.CreateNotification)">
            <summary>
            Создать уведомление
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.MarkNotificationAsReadAsync(System.String)">
            <summary>
            Пометить уведомление как прочитанное
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Messaging.UserNotificationsWorker.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication)">
            <summary>
            Конструктор
            </summary>
            <param name="ambientContext"></param>
            <param name="application"></param>
        </member>
        <member name="T:Ecc.Logic.Services.Users.UserFixService">
            <summary>
            Сервис для проверки пользователей из мастер-хранилища
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserFixService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Contract.Abstractions.IUserMasterStorage,Ecc.Logic.Services.Users.UserService)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="userMasterStorage"></param>
            <param name="userService"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserFixService.ExportUsers(System.Int32)">
            <summary>
            Экспортировать пользователей
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Services.Users.UserService">
            <summary>
            Сервис для работы с пользователями
            </summary>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.#ctor(Croco.Core.Contract.ICrocoAmbientContextAccessor,Croco.Core.Contract.Application.ICrocoApplication,Ecc.Contract.Abstractions.IUserMasterStorage)">
            <summary>
            Конструктор
            </summary>
            <param name="context"></param>
            <param name="application"></param>
            <param name="userMasterStorage"></param>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.CreateUser(System.String)">
            <summary>
            Создать пользователя
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.UpdateUser(System.String)">
            <summary>
            Обновить пользователя
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.CreateOrUpdateUser(Ecc.Contract.Models.Users.EccUserModel)">
            <summary>
            Создать или обновить пользователя
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.CreateUserInner(Ecc.Contract.Models.Users.EccUserModel)">
            <summary>
            Создать пользователя внутренний метод
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Ecc.Logic.Services.Users.UserService.UpdateUserInner(Ecc.Contract.Models.Users.EccUserModel)">
            <summary>
            Обновить пользователя внутренний метод
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Ecc.Logic.Settings.EccLinkFunctionInvokerSettings">
            <summary>
            Настройки для редиректа ссылок в письмах
            </summary>
        </member>
        <member name="P:Ecc.Logic.Settings.EccLinkFunctionInvokerSettings.UrlRedirectFormat">
            <summary>
            Урл на который будет отправляться письмо
            </summary>
        </member>
        <member name="T:Ecc.Logic.Settings.EccSettings">
            <summary>
            Основные настройки пконтекста рассылок
            </summary>
        </member>
        <member name="P:Ecc.Logic.Settings.EccSettings.ApplicationUrl">
            <summary>
            Адрес приложения
            </summary>
        </member>
        <member name="P:Ecc.Logic.Settings.EccSettings.FunctionInvokerSettings">
            <summary>
            Настройки для редиректа ссылок в письмах
            </summary>
        </member>
        <member name="P:Ecc.Logic.Settings.EccSettings.PixelUrlProviderOptions">
            <summary>
            Опции для создания провайдера пикселя
            </summary>
        </member>
        <member name="T:Ecc.Logic.Settings.PixelUrlProviderOptions">
            <summary>
            Опции для создания провайдера пикселя
            </summary>
        </member>
        <member name="P:Ecc.Logic.Settings.PixelUrlProviderOptions.PixelEmailUrlFormat">
            <summary>
            Формат урла для пикселя
            </summary>
        </member>
    </members>
</doc>
